# 游戏核心代码  
	函数 IsA（ClassName::StaticClass()）   ---判断对象的类型
	# AdpGameMode 在里面做初始化
	dpUEdEngine   editor用的
		UdpEnData* _UspEnData;  全局的游戏数据加载，
	
	dPGameEngine  Game用的
		UdpEnData* _UspEnData;  全局的游戏数据加载，还有系统的管理器
		Init()    及时加载
		InitManual()  初始化对应的数据 _UspEnData  延迟加载
			SetGameMode()  设置用到的 GameMode
			bindGame()  
			
			UdpLoginManager  
				登录管理器 初始数据的接口 InitCheckAndloadGame() --> loadLastLoginPlayer()
		AdpGameGameMode   类似于GameInfo
			BeginPlay（）  
				InitialGame()  ---初始化游戏逻辑
	
	#dpGameGameMode  游戏的逻辑控制 GameMode
		PostLogin()  --> BeginPlay()
		
		
		
		
		
			
	# AdpLoginGameMode    登录的逻辑管理器    介入点  
	UGameInstance::StartPIEGameInstance() -->
	ULocalPlayer::SpawnPlayActor() --> LevelActor::SpawnPlayActor(0s
		
		PostLogin()  --> BeginPlay()
		
		showScene() --> GetNextMapName()
		
		setLoginMode()
		
		initialLoginUI()  界面打开后延迟执行
		
		
	# TSharedPtr   共享指针
		创建方法 
			struct MyStruct
			{
				int a; 
			};
			TSharedPtr<MyStruct> pTr = MakeShareable(new MyStruct());
			pTr.a = 0;
			
	
	
# AdpNpcPawn
	BeginPlay() --> InitEnemy()  有可能会延迟执行 --> 
	

# UdpGamePlayer   在PlayerController里面做调用角色数据的接口

# _UspEnData_GameRef  UdpEnData  全局数据的对象引用

# UFUNCTION(exec) 启用命令行来调用函数 调用的自身对应的成员函数 比如
	UFUNCTION(exec)
	void showScene(bool show);
	"showScene true"
	
# 计时器 
	GetWorldTimerManager().SetTimer(TimerHandle_delaypostInitialGame, this, &AdpGameGameMode::delaypostInitialGame, 3.0f, false);
# FText 
	FText::Format( LOCTEXT( "HealthFormatStr",  "{0} / {1}" ), FText::AsNumber( CurrentHealth ), FText::AsNumber( MaxHealth )  ) 
	
	FString pBtnName_UI = FString::Printf(TEXT("Text_Btn%d"), i + 1);
	
#日志的打印
	GLog->Logf(TEXT("ERROR!! Server have get a code %d, %s"), 0, aErr.GetCharArray().GetData());
	打印到屏幕上
		GEngine->AddOnScreenDebugMessage(1, 2, FColor::Green, FString::Printf(TEXT("[UdpNetManager::__dpProcessNetCb] Server have get a code %d %s"), int32(psErrorResp.code()), aErr.GetCharArray().GetData()));
	
	
# 注册用户点击输入的事件
  AdpLoginGameMode  里面
   //使用当前Touch Start 注册
		auto pInput = NewPlayer->InputComponent;
		pInput->BindTouch(EInputEvent::IE_Pressed, _LoginMrg, &ULoginMrg::OnTouchStart);
		pInput->BindTouch(EInputEvent::IE_Released, _LoginMrg, &ULoginMrg::OnTouchEnd);
		pInput->BindTouch(EInputEvent::IE_Repeat, _LoginMrg, &ULoginMrg::OnTouchMove);

# 刷怪触发器 dpGame\Content\Dragon\com\AI\spCycleSpwner_bp
# 怪物的AI  dpGame\Content\Dragon\com\AI\EnemyAI_BP


# 对象基类 
	UserClassSystemInterface 

	UObjSystemInterface

# 收发消息
	//支持 将 ParamTypes 打包成任意类型 
	TCMDMulticastDelegateGather_UFunctionPackageParams
		下属 TCMDMulticastDelegateGather_UFunction<TypeCMD , TypePackage> SuperClass;
	//支持 Obj....
	TCMDMulticastDelegateGather_UObjFunctionPackageParams
		下属 typedef TCMDMulticastDelegateGather_UObjFunction<TypeCMD, TypePackage> SuperClass;


# 生成对应的成员操作函数 Set Get 之类的函数
	PROPERTY_GS_PTR_DEFAULT
	PROPERTY_S_PTR_DEFAULT  PROPERTY_G_PTR_DEFAULT
	还有类似的 OBJ VAR

# 数据读写的操作码 FlagOp

# 广播消息的回调注册操作
	声明 NETNOTIFY_DECLAREFUNC  定义 NETNOTIFY_DECLARECLASSFUNC

# 单例的引用 
	typedef NS_GameFuction::TGameArray<...> GameCache
	利用内存的分配机制
	FMemory::Malloc(SizeClass::Size()))  FMemory::Memzero(Ptr, SizeClass::Size())
	然后传出 TSharedPtr<TGameArray<ParamTypes...>>

	获取单例的对象
		GetCache()->Get<CacheIdx_UdpNetManager>().Get()
	注册单例的对象

# 项目中消息的注册

	GameNetMessage::RegisterStaticFuncs()里执行 RegisterPackageParamsStatic() 
	//对应的消息注册类 GameNetManage类型继承了它 
	//NS_GameFuction::TCMDMulticastDelegateGather_UObjFunctionPackageParams <uint32, TSharedPtr<google::protobuf::Message>, uint8*, int32>
	TCMDMulticastDelegateGather_UObjFunctionPackageParams
		里面包含了 SuperClass 注册的对象执行
		//支持UFunction Bind ... 
		TCMDMulticastDelegateGather_UObjFunction --> SuperClass 在函数 GameNetMessage::RegisterStaticFuncs()注册消息反序列化的执行
		继承父类两个
			TCMDMulticastDelegateGatherBase

			TCMDMulticastDelegateGather_UObjFunction
				事件的绑定，支持Register() Remove()
				继承父类 TCMDMulticastDelegateGatherBase  //由CMD 转发到对应的 Delegate

		2 还有对应的类型 TCMDMulticastDelegateGather_UFunctionPackageParams
		//支持 将 ParamTypes 打包成任意类型  父类有两个与上一个Obj类似
			StaticPackageParamFuncBase 

			//支持UFunction Bind ... 
			TCMDMulticastDelegateGather_UFunction
				继承父类 TCMDMulticastDelegateGatherBase  //由CMD 转发到对应的 Delegate


消息的定义
	NETNOTIFY_DECLARECLASSFUNC
消息的声明
	NETNOTIFY_DECLAREFUNC

	将对象转换成对应的数据类型
	NETNOTIFY_PARSE_2_SUB(DragonProject::sNewRoleResp, aVar);



# 主角动作的快接点控制
	1 AdpPawn::canInteruptBySelf(bool can)  自己打断的标志
		_canInteruptBySelf
		1 控制walking 是否可以打断动作 --> AdpPawn::canDoNewStateAction()

	2 AdpPcPawn::commonAttackNotInterrupt(bool NotInterrupt)
		_commonAttackNotInterrupt
		1 AdpPcPawn::__DoSkill()

		2 _manualCommonAttack 

# 角色创建流程
* 读取
	//动态加载角色数据
	void AdpController::__ChangeForm(int32 pInCid, int32 pInFormId)
		//这个是临时的应代码，从Gamemode取的数据，应该改为读表
		TSubclassOf<class AdpPcPawn>  ptype	= GetGameInfo()->__getPawnType(pInCid, pInFormId);

* 数据导出
	* 工具编辑角色数据导出
		* 目前还没有
	* BP编辑角色数据并导出
		* 修改BP数据，在编辑器中执行save操作时会调用
			AdpPawn::presave()
				在这里把配置好的数据序列化到JSON  


# dppawn 的产生流程
	AdpPawn::PostLoad() 对象的资源加载，在切换场景时就会执行
	//创建新的角色特效组件
	TArray<UParticleSystemComponent*> _DamageEffects;
	UWorld* World = GEngine->GetWorldFromContextObject(GetWorld());
	if (World != nullptr)
	{
		UParticleSystemComponent* PSC = NewObject<UParticleSystemComponent>((GetWorld()->GetWorldSettings() ? GetWorld()->GetWorldSettings() : (UObject*)World));
		PSC->bAutoDestroy = false;
		PSC->bAllowAnyoneToDestroyMe = true;
		PSC->SecondsBeforeInactive = 0.0f;
		PSC->bAutoActivate = false;
		PSC->SetTemplate(_DamageParticleTemplate);
		PSC->bOverrideLODMethod = false;

		PSC->RegisterComponentWithWorld(World);

		PSC->SetAbsolute(true, true, true);
		//PSC->SetWorldLocationAndRotation(location, rotation);
		PSC->SetRelativeScale3D(FVector(1.f));
		PSC->ActivateSystem(false);
		PSC->SetVisibility(false);
		_DamageEffects.Add(PSC);
	}

	//这是spawn到world里面的时候要执行
	virtual void AActor::PostActorCreated();
	//接上步
	 AActor::FinishSpawning() --> AActor::PostInitializeComponents()  

	 //
	 AActor::BeginPlay()

	 //NpcPawn 锁敌用的插槽
	 ak_lock

#-----------编辑器-----------    
	 #GamePawnConfigMgr中的
	 	UDataTable::CreateTableFromCSVString   string转成CSV的数据结构
	 	UGamePawnConfigMrg::LoadConfigAsExporters   加载配置表的数据到编辑器中
	 		返回值是 TArray<FGameConfigExporter*> 
	 	# UGamePawnConfigMrg::GetConfigCsv() 获取对应的csv配置的路径
	 	# UGamePawnConfigMrg::AffirmDataTable()  获取当前的配置表数据容器

	 	# UGamePawnConfigMrg::Export(UDataTable* aTable, bool bNeedEmpty)  导出填好的数据

	 	# 保存数据到表中
	 		UGamePawnConfigMrg::SaveConfigCsv()   
	 		UGamePawnConfigMrg::SaveConfigJson()
	 			然后导入到数据表的对象
	 			UGamePawnConfigMrg::Export()


	 	# 导入配置表数据
	 		UGamePawnConfigMrg::LoadConfigToEditor()
	 			UGamePawnConfigMrg::LoadConfigAsExporters()
	 				UGamePawnConfigMrg::CreateConfig() 由配置导出到具体的数据对象 AGamePawnConfigBase 然后执行
	 				AGamePawnConfigBase* aBase;	aBase->PropertyReadFrom(aExporter); 读取数据

	 	# 划线  UDebugLineComponentBase  具体的应用实例 UDebugLineComponentRelative
	 		使用实例 AGamePawnConfigMonsterSpawner::ShowDebugLine()  里面调用了 UDebugLineComponentBase::AffirmDebugLineComp() 获取一个划线的组件
	 			GetFlagOp().WriteFlag<WRITE>(UDebugLineComponentBase::Dirty_Draw); 使用dirty来调用绘制

#--------动画的通知点------------
	FActorComponentTickFunction::ExecuteTickHelper() --> UDebugSkelMeshComponent::RefreshBoneTransforms() -->
	USkeletalMeshComponent::OverrideAnimationData()  --> USkinnedMeshComponent::TickComponent()


	特效的标记点
		UAnimNotify_PlayParticleEffect   UdpPlayParticleEffect_Nt  UAnimNotify_PlaySound
			继承的 UAnimNotify  时间点的触发标记

		UAnimNotifyState_TimedParticleEffect UAnimNotifyState_Trail
			继承的 UAnimNotifyState 时间段的触发标记

	# UAnimInstance::NotifyQueue   储存上一Tick被触发到的通知点
		FAnimNotifyQueue::AddAnimNotifies() --> FAnimNotifyQueue::AddAnimNotifiesToDest() 添加一个通知点到 NotifyQueue


	Montage --> FSlotAnimationTrack --> FAnimTrack  --> 保存有 TArray<FAnimSegment>  动画的片段 (section)
		FAnimSegment  --> 中保存了 UAnimSequenceBase 动画片段的资源数据 (指针引用)

#编辑器
		编辑器有个统一的渲染模块 FSlateApplication::Tick()
 Montage 
		TSharedRef<IAnimationEditor> CreateAnimationEditor()  调用 FAnimationEditor 的创建 
		然后调用 FAnimationEditor::InitAnimationEditor()  初始化所需要的各种数据
			例如 FPersonaModule& PersonaModule = FModuleManager::LoadModuleChecked<FPersonaModule>("Persona");
					PersonaToolkit = PersonaModule.CreatePersonaToolkit(InAnimationAsset);
		
			SMontageEditor::Construct() 开启编辑界面 界面中的montage对象由 asset资源传入
				最后调入 FPersonaModule::CreateEditorWidgetForAnimDocument() 287 行
					FAnimationEditor::OpenNewAnimationDocumentTab() 中 TSharedRef<SWidget> TabContents = PersonaModule.CreateEditorWidgetForAnimDocument(SharedThis(this), InAnimAsset, Args, DocumentLink);

					FPersona::OpenNewAnimationDocumentTab() 中 TSharedPtr<SWidget> TabContents = PersonaModule.CreateEditorWidgetForAnimDocument(SharedThis(this), InAnimAsset, Args, DocumentLink);

					SAnimMontagePanel::RefreshComboLists()
//montage 编辑器界面
				SMontageEditor::PostUndo()

				SMontageEditor::RebuildMontagePane()


				FPersona::SaveAnimationAssets_Execute()

		怎样获取编辑器的编辑对象？？？



#--------------创建一个Notify----------------
	# SAnimNotifyTrack::CreateNewNotify() 调用进来  创建一个FAnimNotifyEvent() 类型

	# 通知点的时间偏移计算 UAnimSequenceBase::CalculateOffsetForNotify()  获取通知点偏移类型 然后传入 GetTriggerTimeOffsetForType()获取数值

	#替换掉通知点
		SAnimNotifyPanel::OnReplaceSelectedWithNotify()

# 动作的编辑器创建 
	FString Filename = FModuleManager::Get().GetModuleFilename(ModuleName);

	FPersonaModule& PersonaModule = FModuleManager::LoadModuleChecked<FPersonaModule>("Persona");
	ISkeletonEditorModule& SkeletonEditorModule = FModuleManager::GetModuleChecked<ISkeletonEditorModule>("SkeletonEditor");

	///获取module的数据
	FAnimationEditor::InitAnimationEditor()


# 获取动作编辑器的module
 IAnimationEditorModule& AnimationEditorModule = FModuleManager::LoadModuleChecked<IAnimationEditorModule>("AnimationEditor");	
 点击了动作Montage 蓝图资源后，编辑器启动顺序
 FAssetEditorManager::OpenEditorForAsset()  --> 
 通过module工具获取当前资源饿类型：
 	FAssetToolsModule& AssetToolsModule = FModuleManager::LoadModuleChecked<FAssetToolsModule>(TEXT("AssetTools"));
	TWeakPtr<IAssetTypeActions> AssetTypeActions = AssetToolsModule.Get().GetAssetTypeActionsForClass( Asset->GetClass() );

	FAssetTypeActions_AnimationAsset::OpenAssetEditor()
	-->打开对应的资源编辑器
	AssetTypeActions.Pin()->OpenAssetEditor()   -->  打开animation editor

	IAnimationEditorModule& AnimationEditorModule = FModuleManager::LoadModuleChecked<IAnimationEditorModule>("AnimationEditor");
	AnimationEditorModule.CreateAnimationEditor(Mode, EditWithinLevelEditor, AnimAsset);

	-->  PersonaModule的调用
	FPersonaModule& PersonaModule = FModuleManager::LoadModuleChecked<FPersonaModule>("Persona");
	PersonaToolkit = PersonaModule.CreatePersonaToolkit(InAnimationAsset);  --> FPersonaToolkit::CreatePreviewScene()

	--> AnimationEditorPreviewScene::SetPreviewMeshInternal() --> SkeletalMeshComponent 与 NewPreviewMesh不一致 执行 SkeletalMeshComponent->SetSkeletalMesh(NewPreviewMesh);
	--> 最终 UDebugSkelMeshComponent::initAnim()

# 编辑器创建之后 设置ToolbarExtender 添加到 AnimationEditorModule.GetAllAnimationEditorToolbarExtenders();

UDebugSkelMeshComponent 类里面
	class UAnimPreviewInstance* PreviewInstance;   UAnimInstance* SavedAnimScriptInstance;

#编辑器之间用事件代理的触发来交互
	 SAnimationSequenceBrowser::OnRequestOpenAsset() 里的 OnOpenNewAsset.ExecuteIfBound(Asset);

	 FArguments& inArgs  //事件的触发器由此传入

# 事件的触发回调流程
	 OnAssetsActivated.ExecuteIfBound()  //对应的事件触发  手动调用
	 	--> TBaseSPMethodDelegateInstance::ExecuteIfSafe()  --> TBaseSPMethodDelegateInstance::Execute()
	 	 --> 跳转到了对应的事件函数

# 编辑界面传入的参数 Args 例如事件回调 OnShouldFilterAsset(InArgs._AssetPickerConfig.OnShouldFilterAsset)
	 	 _  下划线 自动添加的

# 点击动作编辑器的保存按钮  --> 触发 FUICommandList::ExecuteAction() --> FAssetEditorToolkit::SaveAsset_Execute()






# FAssetEditorToolkit::InitAssetEditor() 注册命令行的数据 MapAction

FAnimationEditor 调用的FAssetToolKit 对象来管理事件 


# UGameInstance 始终存在游戏中，用于存放全局的变量数据 
	UGameEngine   --里面有一变量 UGameInstance* GameInstance;


# AnimSequence 对象的初始化流程
	导入资源时 会先调用 Serialize()  --> PostDuplicate()  --> UObject::ConditionalPostLoad()  --> PostLoad()
		--> 会调用到编辑器的接口 PostEditChangeProperty()

		保存 Serialize()

# 动画通知点的保存 
	FAnimNotifyEvent::TriggerTimeOffset 和 FAnimNotifyEvent::TriggerTimeOffset 需要判断float型的无穷小下限(0.000001)

# 获取 Object 所对应的 UPackage 
	Object->GetOutermost();

# UI界面的事件回调注册  --手动
		//注册冲刺
	UButton* pButton_push = pUiMgr->getUi<UButton>(_pc->GetGameInfo()->_UspUiManager->_spUI,".Button_push");
	if (pButton_push){
		//DP::__BindCallBackByEvent(pButton_push, _pc, EDPUIEVENT::EDPUIEVENT_CLICK);
		// 手动注册的方法
		DP::__BindCallBack(pButton_push->OnClicked,_pc,"__UI_Button_push");
		//
	}

	

	/Game/Dragon/Maps/Scene01/Scene01_01/Scene01_01_enemies

/Game/Dragon/Art/Scene/Scene01/Scene01_01/Scene01_01


# 界面的基类
	dpUIViewBase  ---主管显示   git测试
	 