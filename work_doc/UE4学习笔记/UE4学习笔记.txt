# 工程的log输出路径
	dpGame{工程路径}\Saved\Logs
# 主要是安装要UnrealVS  需要与VS的版本对应，必须是专业版 pro

# android工程配置 
	UnrealEngine-4.14.3-release\Engine\Extras\AndroidWorks\Win64\CodeWorksforAndroid-1R5-windows.exe

# UI界面的编辑器 UMG UI Designer
	https://docs-origin.unrealengine.com/latest/CHN/Engine/UMG/index.html

#组件构建的工具类 ConstructorHelpers::FObjectFinderOptional<{UstaticMesh}> 
	示例 ConstructorHelpers::FObjectFinderOptional<UStaticMesh> PlaneMesh;
		FConstructorStatics()
			: PlaneMesh(TEXT("/Game/Flying/Meshes/UFO.UFO"))
		{
		}
		https://docs-origin.unrealengine.com/latest/CHN/Programming/UnrealArchitecture/Reference/Classes/index.html
		
		ConstructorHelpers::FObjectFinder 通过 StaticLoadObject 为特定的 UObject 寻找引用。它常用于引用存储在内容包中的资源。如未找到对象， 则报告失败。
		ConstructorHelpers::FClassFinder 为特定的 UClass 寻找引用。如类未找到，则报告失败。
		
		指出应该从配置文件中读取哪个变量，那么在包含这些变量的类在其UCLASS宏中应赋予Config标识符
		UCLASS(Config=Game)
		指定读取和保存到配置文件中的某个变量
		UPROPERTY(Config)
		
		Obj->SetupAttachment(Parent, SocketName)  附加到父类上
		#创建空的组件或者subObject 
			CreateDefaultSubobject<USpringArmComponent>(TEXT("SpringArm0"));
			
		#GameMode  通过ini配置表引入
		
		# UCLASS(...)  里面的参数是类说明符
		    https://docs-origin.unrealengine.com/latest/CHN/Programming/UnrealArchitecture/Reference/Classes/index.html
		# Flipbook组件 帧动画
			https://docs-origin.unrealengine.com/latest/CHN/Engine/Paper2D/Flipbooks/Components/Blueprints/index.html
			
# 为确保组件固定被创建、被销毁和被正确地垃圾回收，构建函数中创建的每个组件的指针应被存储在拥有类的一个 UPROPERTY 中
	UPROPERTY() 或者 UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Camera, meta = (AllowPrivateAccess = "true"))
	有参数和没有参数的区别
# 获取附着的组件列表
	GetAttachParent、GetParentComponents、GetNumChildrenComponents、GetChildrenComponents 和 GetChildComponent
	
# 容器 TArray TMap TSet  
	迭代器 
	
# 蓝图
	# 关卡蓝图
		一种特殊类型的 蓝图 ，是作用于整个关卡的全局事件图表。 关卡事件或者关卡中的Actor的特定实例，用于 激活以函数调用或者流程控制操作的形式呈现的动作序列
		# 工作原理 
			从蓝图的基本形式上讲，蓝图 是针对您游戏添加的可视化脚本。通过使用 连线 把 节点 、 事件 、 函数 及 变量 连接到一起， 它可以创建复杂的游戏性元素。
	
	# c++源码暴露给蓝图  https://docs-origin.unrealengine.com/latest/CHN/Engine/Blueprints/TechnicalGuide/ExtendingBlueprints/index.html
		创建继承于一个类的蓝图，那么该类必须定义为 Blueprintable(可蓝图化的) ，这涉及到 在处理类定义的 UCLASS() 宏中添加这个关键字。该关键字使得蓝图系统 知道这个类的存在，以便该类显示在 New Blueprint(新建蓝图) 对话框的类列表中，并且可以
	选择它作为正在创建的蓝图的父类。
	# 创建蓝图API的技巧
		https://docs-origin.unrealengine.com/latest/CHN/Engine/Blueprints/TechnicalGuide/Guidelines/index.html
		
	# 事件节点 Set Input Mode Game Only 此举将关闭游标并将玩家的输入设为仅限游戏。
		
# UMG UI	https://docs-origin.unrealengine.com/latest/CHN/Engine/UMG/index.html
		# CavasPanel

# 添加发射物
	1 添加碰撞体 
		// 使用球体代表简单碰撞。
	    CollisionComponent = CreateDefaultSubobject<USphereComponent>(TEXT("SphereComponent"));
	    // 设置球体的碰撞半径。
	    CollisionComponent->InitSphereRadius(15.0f);
	    // 将碰撞组件设为根组件。
	    RootComponent = CollisionComponent;
	2 添加运动组件
		ProjectileMovementComponent = CreateDefaultSubobject<UProjectileMovementComponent>(TEXT("ProjectileMovementComponent"));
		ProjectileMovementComponent->SetUpdatedComponent(CollisionComponent);
		ProjectileMovementComponent->InitialSpeed = 3000.0f;
		ProjectileMovementComponent->MaxSpeed = 3000.0f;
		ProjectileMovementComponent->bRotationFollowsVelocity = true;
		ProjectileMovementComponent->bShouldBounce = true;
		ProjectileMovementComponent->Bounciness = 0.3f;
	3 定义设置发射速度的函数
		// 在发射方向上设置发射物初速度的函数。
		void AFPSProjectile::FireInDirection(const FVector& ShootDirection)
		{
		    ProjectileMovementComponent->Velocity = ShootDirection * ProjectileMovementComponent->InitialSpeed;
		}
	4 定义好发射的位置 FVector MuzzleOffset; 一般是绑插槽上
		// 生成的发射物类。
		UPROPERTY(EditDefaultsOnly, Category = Projectile)
		TSubclassOf<class AFPSProjectile> ProjectileClass;
	5 发射出物体
		void AFPSCharacter::Fire()
		{
		    // 尝试发射物体。
		    if (ProjectileClass)
		    {
		        // 获取摄像机变换。
		        FVector CameraLocation;
		        FRotator CameraRotation;
		        GetActorEyesViewPoint(CameraLocation, CameraRotation);

		        // 将 MuzzleOffset 从摄像机空间变换到世界空间。
		        FVector MuzzleLocation = CameraLocation + FTransform(CameraRotation).TransformVector(MuzzleOffset);
		        FRotator MuzzleRotation = CameraRotation;
		        // 将准星稍微上抬。
		        MuzzleRotation.Pitch += 10.0f;
		        UWorld* World = GetWorld();
		        if (World)
		        {
		            FActorSpawnParameters SpawnParams;
		            SpawnParams.Owner = this;
		            SpawnParams.Instigator = Instigator;
		            // 在枪口处生成发射物。
		            AFPSProjectile* Projectile = World->SpawnActor<AFPSProjectile>(ProjectileClass, MuzzleLocation, MuzzleRotation, SpawnParams);
		            if (Projectile)
		            {
		                // 设置发射物的初始轨道。
		                FVector LaunchDirection = MuzzleRotation.Vector();
		                Projectile->FireInDirection(LaunchDirection);
		            }
		        }
		    }
		}

	6 设置射弹的碰撞通道  放置在射弹类中(需要编辑器中新建碰撞通道  选择 New Object Channel... 新建碰撞通道。将新建碰撞通道命名为“Projectile”，并将 Default Response 设为 Block，然后点击 Accept。 )
		// 使用球体代表简单碰撞。
	    CollisionComponent = CreateDefaultSubobject<USphereComponent>(TEXT("SphereComponent"));
	    CollisionComponent->BodyInstance.SetCollisionProfileName(TEXT("Projectile"));
	    // 3 秒后消亡。
    	InitialLifeSpan = 3.0f;
    7 发射物体的碰撞函数 定义在射弹类
    	 // 发射物命中物体时调用的函数。
    	void OnHit(class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, FVector NormalImpulse, const FHitResult& Hit)
		{
		    if (OtherActor != this && OtherComponent->IsSimulatingPhysics())
		    {
		        OtherComponent->AddImpulseAtLocation(ProjectileMovementComponent->Velocity * 100.0f, Hit.ImpactPoint);
		    }
		}


