
# 场景动画的切换 Sequencer和Matinee
     Sequencer
        使用诸多特殊 轨迹 定义动画场的组成; 为 Sequencer 添加一些骨架网格体轨迹，然后添加动画轨迹为骨架网格体设置动画，放入镜头轨迹和镜头切换轨迹构成镜头之间的透视和循环。


#组件构建的工具类 ConstructorHelpers::FObjectFinderOptional<{UstaticMesh}> 
    示例 ConstructorHelpers::FObjectFinderOptional<UStaticMesh> PlaneMesh;
        FConstructorStatics()
            : PlaneMesh(TEXT("/Game/Flying/Meshes/UFO.UFO"))
        {
        }
        https://docs-origin.unrealengine.com/latest/CHN/Programming/UnrealArchitecture/Reference/Classes/index.html
        
        ConstructorHelpers::FObjectFinder 通过 StaticLoadObject 为特定的 UObject 寻找引用。它常用于引用存储在内容包中的资源。如未找到对象， 则报告失败。
        ConstructorHelpers::FClassFinder 为特定的 UClass 寻找引用。如类未找到，则报告失败。
        
        指出应该从配置文件中读取哪个变量，那么在包含这些变量的类在其UCLASS宏中应赋予Config标识符
        UCLASS(Config=Game)
        指定读取和保存到配置文件中的某个变量
        UPROPERTY(Config)
        
        Obj->SetupAttachment(Parent, SocketName)  附加到父类上
        #创建空的组件或者subObject 
            CreateDefaultSubobject<USpringArmComponent>(TEXT("SpringArm0"));
            
        #GameMode  通过ini配置表引入
        
        # UCLASS(...)  里面的参数是类说明符
            https://docs-origin.unrealengine.com/latest/CHN/Programming/UnrealArchitecture/Reference/Classes/index.html
        # Flipbook组件 帧动画
            https://docs-origin.unrealengine.com/latest/CHN/Engine/Paper2D/Flipbooks/Components/Blueprints/index.html
            
# 为确保组件固定被创建、被销毁和被正确地垃圾回收，构建函数中创建的每个组件的指针应被存储在拥有类的一个 UPROPERTY 中
    UPROPERTY() 或者 UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Camera, meta = (AllowPrivateAccess = "true"))
    有参数和没有参数的区别
# 获取附着的组件列表
    GetAttachParent、GetParentComponents、GetNumChildrenComponents、GetChildrenComponents 和 GetChildComponent
    
# 容器 TArray TMap TSet  
    迭代器 
    
# 加载对象 
    FindObject<AFunctionalTest>(TestsOuter, *TestName);
    LoadObject<UTexture2D>(NULL, TEXT("/Engine/EngineMaterials/DefaultWhiteGrid.DefaultWhiteGrid"), NULL, LOAD_None, NULL);
    
    static ConstructorHelpers::FObjectFinder<UStaticMesh> SphereVisualAsset(TEXT("/Game/StarterContent/Shapes/Shape_Sphere.Shape_Sphere"));
    // 创建并放置网格物体组件，这样我们能看到球体的位置
    UStaticMeshComponent* SphereVisual = CreateDefaultSubobject<UStaticMeshComponent>(TEXT("VisualRepresentation"));
    //发射出一个特效，绑定到MeshComp
    UGameplayStatics::SpawnEmitterAttached(PSTemplate, MeshComp, SocketName, LocationOffset, RotationOffset);
    //发射出一个特效，绑定到世界上
    UGameplayStatics::SpawnEmitterAtLocation(MeshComp->GetWorld(), PSTemplate, SpawnTransform);
    
# 线程锁 FScopeLock  

#动画Key帧 动画线划分X轴 绿线   Y轴 蓝线   Z轴 红线

# 编辑器的修改
    1 PlayParticleEffect
        类名 UAnimNotify_PlayParticleEffect 
    涉及到编辑器的属性修改
        属性修改的类名 UObject 里面包含有属性修改的对应关联函数
        PostEditChangeProperty( struct FPropertyChangedEvent& PropertyChangedEvent)

    事件触发由montage执行 Notifies 和 
    
# FVector 函数
    FMath::IsFinite(X)   判断当前的变量是否为0
    FVector::ContainsNaN()  检测向量中是否含有非正常值，有，返回true;




#异步的加载资源
        FStringAssetReferences 和TAssetPtr
     #简单方法
        使用ObjectLibrary 示例代码
            if (!ObjectLibrary)
            {
               ObjectLibrary = ConstructObject<UObjectLibrary>(UObjectLibrary::StaticClass());  //创建新的资源库
               ObjectLibrary->ObjectBaseClass = BaseClass;  //关联对应的基类
               ObjectLibrary->UseWeakReferences(GIsEditor); 
               ObjectLibrary->AddToRoot();
            }
            //加载给定路径上的资源数据
            ObjectLibrary->LoadAssetDataFromPath(TEXT("/Game/PathWithAllObjectsOfSameType");
            if (bFullyLoad)
            {
               ObjectLibrary->LoadAssetsFromAssetData();
            }
        资源库的查询示例
            TArray<FAssetData> AssetDatas;
            //获取资源库中的资源列表
            ObjectLibrary->GetAssetDataList(AssetDatas);

            for (int32 i = 0; i < AssetDatas.Num(); ++i)
            {
                   FAssetData& AssetData = AssetDatas[i];

                   const FString* FoundTypeNameString = AssetData.TagsAndValues.Find(GET_MEMBER_NAME_CHECKED(UAssetObject,TypeName));
                   //任何具有 TypeName 文本域且该文本域中包含 "FooType" 的对象
                   if (FoundTypeNameString && FoundTypeNameString->Contains(TEXT("FooType")))
                   {
                          return AssetData;
                   }
            }  //可以调用 ToStringReference() 来把它转换成一个 FStringAssetReference 
        接下来使用 动态加载 管理器  StreamableManager
            1 加载方式有 SynchronousLoad 同步的加载，但是会阻塞主线程；
                RequestAsyncLoad 异步的加载资源，示例
                void UGameCheatManager::GrantItems()
                {
                   TArray<FStringAssetReference> ItemsToStream;
                   FStreamableManager& Streamable = UGameGlobals::Get().StreamableManager;
                   //ItemList 是一个 TArray< TAssetPtr<UGameItem> > 
                   for(int32 i = 0; i < ItemList.Num(); ++i)
                   {
                      ItemsToStream.AddUnique(ItemList[i].ToStringReference());
                   }
                   //调用该代理之前，将保持到任何它所加载的对象的强引用
                   Streamable.RequestAsyncLoad(ItemsToStream, FStreamableDelegate::CreateUObject(this, &UGameCheatManager::GrantItemsDeferred));
                }

                void UGameCheatManager::GrantItemsDeferred()
                {
                   for(int32 i = 0; i < ItemList.Num(); ++i)
                   {
                        //TAssetPtr.Get() 解除对该资源的引用。
                      UGameItemData* ItemData = ItemList[i].Get();
                      if(ItemData)
                      {
                             MyPC->GrantItem(ItemData);
                      }
                   }
                }

# 资源的引用
    1 构造时的引用
        //尝试在内存中查找该资产，如果找不到，则进行加载
        static ConstructorHelpers::FObjectFinder<UTexture2D> BarFillObj(TEXT("/Game/UI/HUD/BarFill"));
        BarFillTexture = BarFillObj.Object;
    2 间接属性引用
        UPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category=Building)
        TAssetPtr<UStaticMesh> BaseMesh;
        //使用 UStaticMesh 的 TAssetPtr 将网格的加载推迟到运行时进行
        UStaticMesh* GetLazyLoadedMesh()
        {
            //检查资产是否已准备好可供访问
            if (BaseMesh.IsPending())
            {
                const FStringAssetReference& AssetRef = BaseMesh.ToStringReference();
                //FStreamingManager执行同步加载
                BaseMesh = Cast< UStaticMesh>(Streamable.SynchronousLoad(AssetRef));
            }
            return BaseMesh.Get();
        }


#模块API的定义
      1 在 Engine 模块中将一个函数加上 ENGINE_API 的标记，那么任何引入 Engine 模块的模块都可以直接访问该函数。

# 虚幻架构
  Actor  --> 声明类，函数 属性
    包含了结构体数据
  # UFunction() 
    1 任何使用 BlueprintCallable、BlueprintImplementableEvent 或 BlueprintPure 说明符（在下方的 函数说明符 中了解更多细节）
      进行声明的 UFunction 均会被公开到蓝图
    2 可在类的默认属性中作为委托进行指定
    3 是唯一一种可作为 exec 函数进行声明的函数类型
  # 委托
    在C++对象上以通用的但类型安全的方式调用成员函数；
    动态地绑定到任何对象的成员函数上；
    在该对象上调用函数;

    应该通过引用传递代理，避免参数传递时分配内存

  # 定时器
    AActor::GetWorldTimerManager() 当前场景中的计时器管理员实例
    FTimerManager::SetTimer() 用于创建定时器，以设定间隔调用特定的本地函数。
    FTimerManager::ClearTimer() 可清理之前设置的定时器，使其不再执行。

  # 对象的创建
    NewObject
      最为简单的UObject工厂模式，并会创建拥有自动生成的名称的新实例
    NewNamedObject
      展开于NewObject()，通过对新实例，对象标识 以及模板对象命名，从而被作为参数定义
    ConstructObject
      调用分配 对象 的StaticConstructObject()函数，执行 ClassConstructor并执行任何初始化任务，
      例如载入配置属性，载入本地化属性以及实例化组件

    销毁对象
      对象不被引用将会被销毁 ； 垃圾回收器运行时，寻找到的未引用对象将被删除
      函数 MarkPendingKill() 可在对象上直接调用，此函数将把指向对象的所有指针设为 NULL，并从全局搜索中移除对象


# 编辑器的修改
  Slate 

  Plugins


# 双击了pawn对象之后,执行顺序 FActorDetails 类中下断点
  SKismetInspector::Tick() --> SKismetInspector::UpdateFromObjects() --> SKismetInspector::MakeContentualWidget()
  --> SDetailsView::SetObjects() --> SDetailsView::SetObjectArrayPrivate() --> SDetailsView::PostSetObject()

  SDetailsViewBase::UpdatePropertyMaps() --> SDetailsViewBase::UpdateSinglePropertyMap() --> SDetailsViewBase::QueryCustomDetailLayout() --> RetValType Execute(ParamTypes... Params)

  主要是在 SDetailsViewBase::QueryCustomDetailLayout()里初始化

# 按钮button 的点击事件注册

  slate 按钮的事件注册
    SLATE_EVENT( FOnClicked, OnClicked ) or SLATE_EVENT( FSimpleDelegate, OnReleased )
    事件的触发调用
      OnReleased.ExecuteIfBound();

    2 primitiveComponent 组件的事件注册
      void UPrimitiveComponent::DispatchOnReleased(FKey ButtonReleased)
      {
        if (IsActorValidToNotify(GetOwner()))
        {
          GetOwner()->NotifyActorOnReleased(ButtonReleased);
          if (IsActorValidToNotify(GetOwner()))
          {
            GetOwner()->OnReleased.Broadcast(GetOwner(), ButtonReleased);
          }
        }

        if (!IsPendingKill())
        {
          OnReleased.Broadcast(this, ButtonReleased);
        }
      }

      3 Button 按钮的事件
        void UButton::SlateHandlePressed()
        {
          OnPressed.Broadcast();
        }

# 创建一个系统的盒子
  FCollisionShape::MakeBox()
  射线检测
    GetWorld()->LineTraceSingleByChannel()


# ActorComponent 所有component的基类  
    USceneComponent --> 派生
      1 UPrimitiveComponent --> 派生
        UMeshComponent --> 派生
          UStaticMeshComponent

      2 UChildActorComponent -->

# 设置碰撞的通道 
      static FName CollisionProfileName(TEXT("Spectator"));
      GetCollisionComponent()->SetCollisionProfileName(CollisionProfileName);

# 编译器的编译命令
      
E:\DP_Private\UnrealEngine-4.14.3-release\Engine\Build\BatchFiles\Build.bat


#引擎继承的规则
   UObjectBase --> UObjectBaseUtility --> UObject
      UObjectBase 成员中有 ClassPrivate ，调用 GetClass()可获取 UClass*  
          UClass下方有成员 ClassGeneratedBy （Object* 对象），ClassGeneratedBy有为null的情况
      ClassGeneratedBy==null 时 Object 的Name 获取可以从 GetClass()->GetName() 获取

# 移除掉AnimSequenceBase上面的notifies, 流程


# 手动处理编辑器的资源保存
      if(!aSheet)return nullptr ;
  UPackage* Pkg = CreatePackage(nullptr, *aPackagePath);
  UDataTable* NewObj = nullptr;
  EObjectFlags Flags = RF_Public | RF_Standalone;
  NewObj = NewObject<UDataTable>(Pkg, UDataTable::StaticClass(), TEXT("XLnest"), Flags);
  int32 Row = aSheet->lastRow();
  NewObj->RowStruct = Fnest::StaticStruct();
  FName aName;
  for (int idx = EdConst::Const_DataRowStartIdx; idx < Row; idx++)
  {
    if (aSheet->readNum(idx, 0) == 0)continue;
    aName = *(FString::FromInt(idx - EdConst::Const_DataRowStartIdx));
    Fnest& aStruct = *((Fnest*)FMemory::Malloc(sizeof(Fnest)));
    FMemory::Memzero(&aStruct, sizeof(Fnest));
    aStruct._des = aSheet->readNum(idx, 0);
    aStruct._type = aSheet->readNum(idx, 1);
    aStruct._job = aSheet->readNum(idx, 2);
    aStruct._part = aSheet->readNum(idx, 3);
    {
      TArray<FString>  AArr;
      ConvertTable::ReduceDimensional(AArr,aSheet->readStr(idx, 4));
      {
        TArray<FString>  OneArr;
        ConvertTable::ReduceDimensional(OneArr,AArr[0]);
        aStruct._A._One._issell = FCString::Strtoi(*OneArr[0], nullptr, 10);
      }
      {
        TArray<FString>  TwoArr;
        ConvertTable::ReduceDimensional(TwoArr,AArr[1]);
        FHeHeOne  aTwo  ;
        for (int32 TwoIdx = 0 ; TwoIdx<TwoArr.Num();TwoIdx++)
        {
          TArray<FString> aTwoArrSub;
          ConvertTable::ReduceDimensional(aTwoArrSub,TwoArr[TwoIdx]);
          check(aTwoArrSub.Num() == 1 );
          aTwo._issell  = FCString::Strtoi(*aTwoArrSub[0], nullptr, 10);
          aStruct._A._Two.Add(aTwo);
        }
      }
    }
    NewObj->RowMap.Add(aName, reinterpret_cast<uint8*>(&aStruct));
  }
  UPackage::SavePackage(Pkg, nullptr, RF_Standalone, *FPackageName::LongPackageNameToFilename(*aPackagePath, FPackageName::GetAssetPackageExtension()), GLog, nullptr, false, true, SAVE_None);
  return  NewObj;

  # 数据的字节数
  sizeof(int32) = 4
  sizeof(FString) = 16
  sizeof(UObject*) = 8
  sizeof(bool) = 1


  #富文本
  ---渲染的
    TArray< TSharedRef< class ITextDecorator > > Decorators;
      const bool bForEditing = false;
      FTutorialText::GetRichTextDecorators(bForEditing, Decorators);

      TSharedRef<SRichTextBlock> TextBlock = SNew(SRichTextBlock)
          .Visibility(EVisibility::SelfHitTestInvisible)
          .TextStyle(FEditorStyle::Get(), "Tutorials.Content.Text")
          .DecoratorStyleSet(&FEditorStyle::Get())
          .Decorators(Decorators)
          .Text(InContent.Text)
          .AutoWrapText(bAutoWrapText)
          .WrapTextAt(WrapTextAt)
          .Margin(4)
          .LineHeightPercentage(1.1f)
          .HighlightText(InHighlightText);

      return TextBlock;

 辅助的类 FTutorialText
 ---初始化时候
  FTutorialStage& Stage = InTutorialToImportTo->Stages[InTutorialToImportTo->Stages.Add(FTutorialStage())];
        Stage.Name = *Excerpt.Name;
        Stage.Content.Type = ETutorialContent::RichText;

        FString RichText;
        FString* TitleStringPtr = Excerpt.Variables.Find(TEXT("StageTitle"));
        if(TitleStringPtr != nullptr)
        {
          RichText += FString::Printf(TEXT("<TextStyle Style=\"Tutorials.Content.HeaderText2\">%s</>\n\n"), **TitleStringPtr);
        }
        RichText += Excerpt.RichText;

        Stage.Content.Text = FText::FromString(RichText);

# 渲染流程
      1, Game thread  //游戏线程 
        (1) World Tick
          Physics  
          Game logic
        (2) Slate Tick   //Prepass：从下到上遍历树，计算每一个Widget的理想尺寸 （Desired Size）。
                         //OnPaint：从上到下遍历树，计算渲染所需的 Draw Elements 。
          Layout computations
          Painting
      2, Render thread
        (1) Draw scene
        (2) Slate
          Widget Render   //执行 UI 的 RTT，如果使用了 Retainer Box，这里会将 Draw Elements 渲染到 Retainer Box 的 Render Target。
          Slate Render    //将 Draw Elements 渲染到 Back Buffer，如果使用了 Retainer Box，会将 Retainer Box 对应的 Texture Resource 渲染到 Back Buffer。
        (3) Present
# 性能指标
      命令：stat.Slate  //查看总的性能指标
      stat dumpave -num=120 -ms=0.5  //查看统计线程变量的时间开销  ,以日志输出，减少额外的消耗
      //三个关键指标的统计数据分别是：
        Slate Tick：统计线程变量 STAT_SlateTickTime。
        Slate Render：统计线程变量 STAT_SlateRenderingRTTime。
        Widget Render：统计线程变量 FWidgetRenderer_DrawWindow。
# UI 的优化方案 
      Invalidation box
        1 可以勾选 Invalidation Box 对应的 Cache Relative Transforms ;
            那么当 User Widget 的位置变化时，引擎不会去更新所有的 Draw Element（即 Vertex Buffer ），而会通过修改 Shader 参数（View * Projection Matrix）来反应位置变化; 对缩放无效

        widget频繁的缓存会消耗过多的性能，解决的方法
            1 拆分 Invalidation Box，根据 Widget 变化是否频繁将它们拆分到不同的 Invalidation Box 中。

            2 将 Widget 设定成 Is Volatile，这样上层的 Invalidation Box 在缓存时就会排除这个 Widget，
            该 Widget 每帧都会 Tick 并计算 Prepass 和 OnPaint，但整体 Widget Tree 的缓存不会受到影响。
        
        Slate.AlwaysInvalidate 命令可以强制 Invalidation Box 每帧更新缓存，可以用于测试是否会造成突然的卡顿。

      可见性
        Visible： 可见、可点击
        HitTestInvisible： 可见、当前 Widget 不可点击、所有 Child Widget 不可点击
        SelfHitTestInvisible： 可见、当前 Widget 不可点击、不影响 Child Widget
        Hidden： 不可见、占用布局空间
        Collapsed： 不可见、不占用布局空间

# FName 轻型的字符串类型，即使被使用多次，也只是在数据表中储存一次
        不区分大小写， 不可变，无法被操作； 访问和查找速度较快

# FText  